        private int ДобавитьСубконтоВСписок(OLE ЧтоДобавляем)
        {
            // Назначение:
            //		Добавляет значение в список спОбъектыАналитики без повторений
            // Аргументы:
            //		Значение проивольного типа, которое добавляем в список
            // Возвращает:
            //		Номер позиции в списке, в которой хранится значение

            //int Инд = (int)спОбъектыАналитики.Method("НайтиЗначение", ЧтоДобавляем);
            //if (Инд == 0)
            //{
            //    спОбъектыАналитики.Method("ДобавитьЗначение", ЧтоДобавляем);
            //    return (int)спОбъектыАналитики.Method("РазмерСписка");
            //}
            //return Инд;
            return 0;
        }
        
        private OLE ПолучитьСубконтоИзСписка(int КодСубконто)
        {
            // Назначение:
            //		Получает субконто из списка спОбъектыАналитики
            // Аргументы:
            //		КодСубконто		 - номер позиции в списке
            // Возвращает:
            //		Значение субконто
            //if ((КодСубконто > 0) && (КодСубконто <= (int)спОбъектыАналитики.Method("РазмерСписка")))
            //{
            //    return спОбъектыАналитики.Method("ПолучитьЗначение", (double)КодСубконто);
            //}
            //return V7Z.Method("ПолучитьПустоеЗначение");
            return null;
        }

        private OLE ПолучитьСчетПУБ(string ZIKAccount, OLE ZIKSotr)
        {
            //string Z = "";
            //foreach(char C in ZIKAccount)
            //{
            //    if (C == '.') continue;
            //    Z=Z+C;
            //}
            //ZIKAccount = Z;
            //if (ZIKAccount == "ВЗ")
            //{
            //    OLE Sotr = ПолучитьСотрудникаПУБ(ZIKSotr);
            //    return Sotr.Property("СчетЗатрат").Method("Получить", ДатаНач);
            //}

            //return V7B.EvalExpr("AccountByCode(\"" + Z + "\")");
            return null;
        }

        //private List<PodrazdelenieSTR> CreateListPodrazdelenie()
        //{
        //    // Подсчитываем подразделения
        //    OLE Podr = V7Z.CreateObject("Справочник.Подразделения");
        //    List<PodrazdelenieSTR> Podrazdelenie = new List<PodrazdelenieSTR>();
        //    Podr.Method("ВыбратьЭлементы");
        //    while (Podr.Method("ПолучитьЭлемент").ToBool())
        //    {
        //        PodrazdelenieSTR p = new PodrazdelenieSTR();
        //        p.Code = Podr.Property("Code").ToString();
        //        p.Summ = 0;
        //        Podrazdelenie.Add(p);
        //    }
        //    return Podrazdelenie;
        //}
 
         //void ПроводкуВДБФ(OLE Сотрудник, OLE Назначение, OLE Проводка, decimal Сумма, OLE Заказ, OLE Вир, DateTime ПерД, int НомерПроводки)
        //{ 
        //// Назначение:
        ////		Добавляет во временный DBF-файл запись о проводке
        //// Аргументы:
        ////		Сотрудник		- сотрудник, по которому формирует проводка
        ////		Проводка 		- элемент справочника ЭП_Проводки, на основании которого формируется проводка
        ////		Сумма 			- сумма проводки
        ////		Заказ			- объект аналитического учета любого типа, который подставляется в автозаполняемые субконто
        ////		Вир				- вид расчета, на основании которого формируется проводка
        ////		НомерПроводки 	- номер проводки в пределах хозоперации
        
       
        //    int[] SubcontoDebit = new int[МаксКоличествоСубконто];
        //    int[] SubcontoCredit = new int[МаксКоличествоСубконто];

        //    if (OLE.IsEmtyValue(Проводка.Property("СчетДебета")) && OLE.IsEmtyValue(Проводка.Property("СчетДебета")))
        //    {
        //        Static.ShowInfo("В проводке №" + Проводка.Property("Код") + " хоз. операции " + Проводка.Property("Владелец").Property("Description") + " не заданы счета! Проводка не формируется!");
        //        return;
        //    }

        //    if ((Сумма < (decimal)0.005) || (Сумма > (decimal)-0.005))
        //    {
        //        Static.ShowInfo("По проводке №" + Проводка.Property("Код") + " хоз. операции " + Проводка.Property("Владелец").Property("Description") + " сумма 0! Проводка не формируется!");
        //        return;
        //    }


        //    OLE СчетДебета = ПолучитьСчетПУБ(Проводка.Property("СчетДебета").ToString(), Сотрудник);
        //    OLE СчетКредита = ПолучитьСчетПУБ(Проводка.Property("СчетКредита").ToString(), Сотрудник);

        //    Static.ShowInfo("ПроводкуВДБФ:" + Сотрудник.Property("Description") + ":Д" + СчетДебета.Property("Description") + "-К" + СчетКредита.Property("Description") + ":" + Сумма + ":" + Заказ.Property("Description"));


        //    // обнулим аналитику
        //    for (int Инд = 1; Инд < МаксКоличествоСубконто; Инд++)
        //    {
        //        SubcontoDebit[Инд] = 0;
        //        SubcontoCredit[Инд] = 0;
        //    }

        //    АнализСубконто(ref SubcontoDebit, 0, СчетДебета, Вир, ПерД, Сотрудник, Проводка, Заказ);
        //    АнализСубконто(ref SubcontoCredit, 1, СчетКредита, Вир, ПерД, Сотрудник, Проводка, Заказ);


 
        //    // проводокa
        //    // добавим в файл проводок  
        //    дбфЭкспорт.Method("Добавить");
        //    //string ACC_D = КодСчетаДебета;
        //    //string ACC_K = КодСчетаКредита;
        	
        //    // сумма
        //    decimal SUM;
        //    if (Проводка.Property("УказанПроцент").ToInt() == 1)
        //    {
        //        SUM = decimal.Round(Сумма * Проводка.Property("Процент").ToDecimal() / 100, 2);
        //    }
        //    else
        //    {
        //        SUM = Сумма;
        //    } 
        	
        //    // добавим в файл проводок  
        //    дбфЭкспорт.Method("Добавить");
        //    дбфЭкспорт.Property("ACC_D",СчетДебета.Property("Code"));
        //    дбфЭкспорт.Property("ACC_K",СчетКредита.Property("Code"));

        //    for (int i = 1; i < МаксКоличествоСубконто; i++)
        //    {
        //        дбфЭкспорт.Property("SUBC_D" + i, SubcontoDebit[i]);
        //        дбфЭкспорт.Property("SUBC_K" + i, SubcontoCredit[i]);
        //    }
        	
        //    // сумма
        //    дбфЭкспорт.Property("SUM",SUM);  

        //    // добавим в файл налогов
        //    int Добавлена = 0;
        //    for (int Инд = 1; Инд < НалоговФЗП;Инд++)
        //    {
        //        тбНалоги.Method("ПолучитьСтрокуПоНомеру",Инд);
        //        if (Вир.Method("ВходитВГруппу",тбНалоги.Property("ГруппаРасч")).ToBool())
        //        { 
        //            if ((НомерПроводки == 1) && !( (КодСчетаДебета = "ВР") && (Вир = ВидРасчета.ОплатаБольничного) ) 
        //            {

        //                текНомерПроводки = 0;	
        //                OLE ХозОперация = ПолучитьХозОперацию(Сотрудник);
        //                OLE СпрПроводок = V7Z.CreateObject("Справочник.Проводки"); 
        //                СпрПроводок.Method("ИспользоватьВладельца",ХозОперация);
        //                СпрПроводок.Method("ВыбратьЭлементы");
        //                while (СпрПроводок.Method("ПолучитьЭлемент").ToBool())
        //                {    
        //                    текНомерПроводки = текНомерПроводки + 1;	
        					
        //                    //нашли нужную проводку   
        //                    OLE ТекПроводка = СпрПроводок.Method("ТекущийЭлемент");
        //                    // входит в базу хотя бы одного налога, добавим запись в ДБФ
        //                    дбфНалоги.Method("Добавить");
        //                    дбфНалоги.Property("TAB_N",ПолучитьСотрудникаПУБ(Сотрудник).Property("Code"));
        					
        //                    ТекСчет = ТекПроводка.СчетДебета;
        //                    КодСубконто[1] = "";
        //                    КодСубконто[2] = "";
        //                    КодСубконто[3] = "";
        //                    КодСубконто[4] = ""; 
        					
        //                    АнализСубконто(КодСубконто, 1, "Дебет",  4, ТекСчет, Вир, ПерД, Сотрудник, Назначение, ТекПроводка, Заказ);  
        //                    дбфНалоги.ACC_D = ТекСчет.Код;
        //                    дбфНалоги.SUBC_D1 = Строка(КодСубконто[1]);
        //                    дбфНалоги.SUBC_D2 = Строка(КодСубконто[2]);
        //                    дбфНалоги.SUBC_D3 = Строка(КодСубконто[3]);
        //                    дбфНалоги.SUBC_D4 = Строка(КодСубконто[4]);
        					
        //                    // сумма
        //                    Если текПроводка.УказанПроцент = 1 Тогда
        //                        дбфНалоги.УстановитьЗначениеПоля(тбНалоги.ИдСуммы,Окр(Сумма*текПроводка.Процент/100,2));
        //                    Иначе
        //                        дбфНалоги.УстановитьЗначениеПоля(тбНалоги.ИдСуммы,Сумма);
        //                    КонецЕсли;
        					
        //                    Если текНомерПроводки = 1 Тогда
        //                        // сумму по всей хозоперации записываем только для первой проводки в отдельное поле
        //                        // таким образом итог по нему равен сумме по всем хозоперациям
        //                        // Внимание! процент по данной проводке не влияет на сумму по всей хозоперации
        //                        дбфНалоги.УстановитьЗначениеПоля(тбНалоги.ИдСуммы+"OP",Сумма);
        //                    КонецЕсли;  
        					
        //                }
        //                СпрПроводок = null;
        //            }
        //            else
        //            {
        				
        //                if (Добавлена == 0)
        //                {
        //                    // входит в базу хотя бы одного налога, добавим запись в ДБФ
        //                    дбфНалоги.Добавить();
        //                    дбфНалоги.TAB_N = Сотрудник.Код;
        //                    дбфНалоги.ACC_D = КодСчетаДебета;
        //                    дбфНалоги.SUBC_D1 = SUBC_D1;
        //                    дбфНалоги.SUBC_D2 = SUBC_D2;
        //                    дбфНалоги.SUBC_D3 = SUBC_D3;
        //                    дбфНалоги.SUBC_D4 = SUBC_D4;
        //                    Добавлена = 1;
        //                }
        //                // сумма
        //                Если Проводка.УказанПроцент = 1 Тогда
        //                    дбфНалоги.УстановитьЗначениеПоля(тбНалоги.ИдСуммы,Окр(Сумма*Проводка.Процент/100,2));
        //                Иначе
        //                    дбфНалоги.УстановитьЗначениеПоля(тбНалоги.ИдСуммы,Сумма);
        //                КонецЕсли;
        				
        //                Если НомерПроводки = 1 Тогда
        //                    // сумму по всей хозоперации записываем только для первой проводки в отдельное поле
        //                    // таким образом итог по нему равен сумме по всем хозоперациям
        //                    // Внимание! процент по данной проводке не влияет на сумму по всей хозоперации
        //                    дбфНалоги.УстановитьЗначениеПоля(тбНалоги.ИдСуммы+"OP",Сумма);
        //                КонецЕсли;  
        //            }
        //        }
        //    }
        //}

       private void НайтиРаспределение(OLE ПоЧемИщем, ref OLE Распределение, ref OLE ХозОперация)
        {
        //    // процедура предназначена для поиска документа-распределения и хозоперации в списке
        //    // ПоЧемИщем - назначение, сотрудник, подразделение или категория, по которой ищем в списке
        //    // Распределение - найденный документ "Распределение основных начислений"
        //    // ХозОперация - найденная хозоперация
        //    if (!OLE.IsEmtyValue(Распределение)) return; // распределение уже выбрано

        //    // собственно поиск
        //    int Инд = спРаспределения.BinarySearch(ПоЧемИщем);
        //    if (Инд >= 0)
        //    {
        //        // получилось найти документ-распределение в списке
        //        Распределение = V7Z.CreateObject(спРаспределения[Инд]);
        //    }
        //    else
        //    {
        //        if (OLE.IsEmtyValue(ХозОперация))
        //        {
        //            // найдем хозоперацию
        //            // возможно для элемента справочника ПоЧемИщем хозоперация задана явно
        //            try
        //            {
        //                ХозОперация = ПоЧемИщем.Property("ХозОперация");
        //            }
        //            catch { }
        //        }
        //    }
        }
        private void АнализСубконто(ref int[] CodSubconto, int DebitCredit, OLE Счет, OLE Вир, DateTime ПерД, OLE Сотрудник, /*OLE Назначение,*/ OLE Проводка, OLE Заказ)
        {
            //  CodSubconto - Список номеров субконто
            //  DebitCredit - (0 - Debit, 1- Credit)
            //  Счет        - счёт который мы обрабатываем (БУХ)
            //  Вир			- вид расчета, на основании которого формируется проводка
            //for (int SNumber = 1; SNumber < МаксКоличествоСубконто; SNumber++)
            //{
            //    OLE ВидСубк = Счет.Method("ВидСубконто", SNumber);
            //    if (OLE.IsEmtyValue(ВидСубк)) continue;
            //    string ИдентифВидСубк = ВидСубк.Method("Идентификатор").ToString().Trim();

            //    if (ИдентифВидСубк == "Сотрудники")
            //    {
            //        if (!БезАналитикиПоСотрудникам)
            //        {
            //            CodSubconto[SNumber] = ДобавитьСубконтоВСписок(ПолучитьСотрудникаПУБ(Сотрудник));
            //        }
            //        continue;
            //    }
            //    if (ИдентифВидСубк == "МесяцНачисленияЗП")
            //    {
            //        if (АналитикаПоПериодам)
            //        {
            //            DateTime МесяцНачисленияЗП = ДатаНач;
            //            if (!OLE.IsEmtyValue(Вир))
            //            {
            //                if ((bool)Вир.Method("ВходитВГруппу", V7Z.EvalExpr("ГруппаРасчетов.ВсеВыплаты")))
            //                {
            //                    // для выплат дату установим в начало периода действия
            //                    МесяцНачисленияЗП = ПерД;
            //                }
            //            }
            //            CodSubconto[SNumber] = ДобавитьСубконтоВСписок(new OLE(МесяцНачисленияЗП));
            //        }
            //        continue;
            //    }

            //    if (ИдентифВидСубк == "Подразделения")
            //    {
            //        CodSubconto[SNumber] = ДобавитьСубконтоВСписок(ПолучитьСотрудникаПУБ(Сотрудник).Property("Подразделение"));
            //        continue;
            //    }
            //    // остальные виды субконто
            //    if (Проводка.Method("ПолучитьАтрибут", "АвтоСубконто" + StrDebitCredit[DebitCredit] + SNumber).ToBool())
            //    {
            //        CodSubconto[SNumber] = ДобавитьСубконтоВСписок(Заказ);
            //    }
            //    else
            //    {
            //        CodSubconto[SNumber] = ДобавитьСубконтоВСписок(Проводка.Method("ПолучитьАтрибут", "Субконто" + StrDebitCredit[DebitCredit] + SNumber));
            //    }
            //}
        }
        private OLE ПолучитьСубконтоПУБ(OLE SubcontoZIK)
        {
            OLE SubcontoPUB = V7B.CreateObject("Справочник." + SubcontoZIK.Property("Владелец").Property("ИдентифВида").ToString().Trim());
            if (SubcontoPUB.Method("FindByFullCode",SubcontoZIK.Property("КАУ").ToString().Trim()).ToBool())
            {
                return SubcontoPUB.Method("CurrentItem");
            }
            return null;
        }
        private OLE ПолучитьХозОперацию(OLE Сотрудник)
        {
            // процедура предназначена для определения хоз операции по умолчанию
            // порядок: Назначение => Подраделение => Категория
                                 
            OLE ХозОперация;
        	
            OLE ОснНазн = Сотрудник.Property("ОсновноеНазначение").Method("Получить", CommonVariables.ДатаПериода.End); 
        	
            if (!OLE.IsEmtyValue(ОснНазн.Property("ХозОперация")))
            {
                ХозОперация = ОснНазн.Property("ХозОперация");
            }
            else
            {
                OLE Подразделение = ОснНазн.Property("МестоРаботы").Property("Владелец");
                while (!OLE.IsEmtyValue(Подразделение.Property("Родитель")) && OLE.IsEmtyValue(Подразделение.Property("ХозОперация")))
                {  
                    Подразделение = Подразделение.Property("Родитель");
                } 
                ХозОперация = Подразделение.Property("ХозОперация");
        		
                if (OLE.IsEmtyValue(ХозОперация))
                {
                    try
                    {
                        OLE Категория = ОснНазн.Property("МестоРаботы").Property("Должность").Property("Категория");
                        ХозОперация = Категория.Property("ХозОперация");
                    }
                    catch
                    {
                        Trace.WriteLine("Не могу определить Категорию по Назначению " + ОснНазн + " для Сотрудника " + Сотрудник);
                    }
                }
            }
            return ХозОперация;
        }

        private void Проводка1(string СчетДебета, string СчетКредита, OLE спСубконто, decimal Сумма, EntryType ТипПроводки)
        {
    //    // Назначение:
    //    //		Процедура формирует строку о проводке в формате 1С:Бухгалтерии 7.7
    //    //		Для операций по 23 счету в конфигурации 1СПУБ77 вместо проводок заполняются строки 
    //    //		документа ЗатратыПроизводственногоХарактера
    //    // Аргументы:
    //    //		СчетДебета, 
    //    //		СчетКредита - строковые коды счетов
    //    //		спСубконто 	- список значений, хранящий субконто как по дебету, так и по кредиту
    //    //		Сумма 		- сумма проводки
    //    //		ТипПроводки	- вспомогательный параметр, в настоящее время используется только для конфигурации 1СПУБ77
            
    //    Сумма = decimal.Round(Сумма,2);
    //    if (Сумма ==0) return;  // с нулевыми суммами не формируем
	
    ////    спрСчета = СоздатьОбъект("Справочник.Счета");
    ////    string стрПроводка = "\"\",""Проводка"","""",""Сумма()"+Сокрлп(Сумма)+"""";
    ////    // по умолчанию формируем строку об обычной проводке
    ////    if ((ТипПроводки ==EntryType.ПоСчетуПроизводства) && (Version1C == ConfigVersion1C.V1C77PUB))
    ////    {
    ////        // для конфигурации 1СПУБ77 по 23 счету вместо проводок заполняем строки специального документа
    ////        стрПроводка = """"",""Строка"","""",""";
    ////        Если Лев(СчетДебета,2) = СчетПроизводства Тогда
    ////            стрПроводка = стрПроводка + "Сумма()"+Сокрлп(Сумма)+"""";
    ////        ИначеЕсли Лев(СчетКредита,2) = СчетПроизводства Тогда
    ////            стрПроводка = стрПроводка + "Сумма()"+Сокрлп(Число(-Сумма))+"""";
    ////        Иначе
    ////            Возврат; // при обработке 23 счета остальные пропускаем
    ////        КонецЕсли;
    ////    }
    ////    ИначеЕсли (ТипПроводки = "") и (ФорматФайла = "1СПУБ77") Тогда
    ////        Если (Лев(СчетДебета,2) = СчетПроизводства) или (Лев(СчетКредита,2) = СчетПроизводства) Тогда
    ////            Возврат; // при обработке остальных пропускаем 23
    ////        КонецЕсли;
    ////    КонецЕсли;
    	
    ////    // дебет и кредит
    ////    стрДебетКредит = "Дебет";
    ////    ТекСчет = "";
    ////    Если спрСчета.НайтиПоКоду(Сокрлп(СчетДебета)) = 1 Тогда
    ////        ТекСчет = спрСчета.ТекущийЭлемент();
    ////    КонецЕсли;
    	
    ////    Для ИндДебетКредит = 1 По 2 Цикл
    ////        Если ПустоеЗначение(ТекСчет) = 1 Тогда
    ////            Продолжить;
    ////        КонецЕсли;
    		
    ////        Если ТипПроводки = "ПоСчетуПроизводства" Тогда
    ////            Если Лев(ТекСчет,2) <> СчетПроизводства Тогда
    ////                стрПроводка = стрПроводка + ",""Счет(Счет.Основной)"+Сокрлп(ТекСчет)+"""";
    ////            КонецЕсли;
    ////        Иначе
    ////            // обычные счета дебета и кредита в табличной части
    ////            стрПроводка = стрПроводка + ","""+стрДебетКредит+"(Счет.Основной)"+Сокрлп(ТекСчет)+"""";
    ////        КонецЕсли;
    		
    ////        Для ИндСубк = 1 По МаксКоличествоСубконто Цикл // по всем субконто
    ////            // определим идентификатор субконто
    ////            ВидСубк = ТекСчет.ПолучитьАтрибут("ВидСубконто"+ИндСубк);
    ////            Если ПустоеЗначение(Сокрлп(ВидСубк)) = 1 Тогда
    ////                Продолжить;
    ////            КонецЕсли;
    ////            ИдентВидСубк = Сокрлп(ВидСубк.Идентиф);
    			
    ////            // проверим, нужно ли заполнять
    ////            Если ПустоеЗначение(Сокрлп(ИдентВидСубк)) = 1 Тогда
    ////                Продолжить;
    ////            КонецЕсли;
    ////            Если ((ИдентВидСубк = "Сотрудники") и (БезАналитикиПоСотрудникам = 1)) или 
    ////            ((ИдентВидСубк = "МесяцНачисленияЗП") и (АналитикаПоПериодам = 0)) Тогда
    ////                Продолжить;
    ////            КонецЕсли;
    			
    ////            // получим значение и ссылку
    ////            ТекСсылкаСубконто = Число(спСубконто.Получить("Субконто"+стрДебетКредит+ИндСубк)); // номер в списке спОбъектыАналитики
    ////            ТекЗначениеСубконто = ПолучитьСубконтоИзСписка(ТекСсылкаСубконто); // конкретное значение
    ////            ТипЗначенияСубконто = ТипЗначенияСтр(ТекЗначениеСубконто);
    			
    ////            Если ПустоеЗначение(ТекЗначениеСубконто) = 1 Тогда
    ////                Продолжить;
    ////            КонецЕсли;
    			
    ////            // дополним строку данными об этом реквизите
    ////            Если ТипПроводки = "ПоСчетуПроизводства" Тогда
    ////                // выгрузка произв. операций в 1СПУБ77, заполняем реквизиты табличной части документа
    ////                Если Лев(ТекСчет,2) = СчетПроизводства Тогда
    ////                    // именованные реквизиты документа - вид деятельности, подразделение, продукция, заказ, вид затрат
    ////                    Если ИдентВидСубк = "Подразделения" Тогда
    ////                        стрПроводка = стрПроводка + ",""Подразделение(#)"+ТекСсылкаСубконто+"""";
    ////                    ИначеЕсли ИдентВидСубк = "ВидыДеятельности" Тогда
    ////                        стрПроводка = стрПроводка + ",""ВидДеятельности(#)"+ТекСсылкаСубконто+"""";
    ////                    ИначеЕсли ИдентВидСубк = "ТМЦ" Тогда
    ////                        стрПроводка = стрПроводка + ",""Продукция(#)"+ТекСсылкаСубконто+"""";
    ////                    ИначеЕсли ИдентВидСубк = "Заказы" Тогда
    ////                        стрПроводка = стрПроводка + ",""Заказ(#)"+ТекСсылкаСубконто+"""";
    ////                    ИначеЕсли ИдентВидСубк = "ВидыЗатрат" Тогда
    ////                        стрПроводка = стрПроводка + ",""ВидЗатрат(#)"+ТекСсылкаСубконто+"""";
    ////                    КонецЕсли;
    ////                Иначе
    ////                    // произвольные субконто по корр. счету
    ////                    Если (ТипЗначенияСубконто = "Дата") или (ТипЗначенияСубконто = "Строка") или (ТипЗначенияСубконто = "Число") Тогда
    ////                        // простые типы данных записываем без ссылок
    ////                        стрПроводка = стрПроводка + ",""Субконто"+ИндСубк+"("+ТипЗначенияСубконто+")"+ТекЗначениеСубконто+"""";
    ////                    Иначе
    ////                        стрПроводка = стрПроводка + ",""Субконто"+ИндСубк+"(#)"+ТекСсылкаСубконто+"""";
    ////                    КонецЕсли;
    ////                КонецЕсли;
    ////            Иначе
    ////                // заполняем реквизиты проводки
    ////                Если (ТипЗначенияСубконто = "Дата") или (ТипЗначенияСубконто = "Строка") или (ТипЗначенияСубконто = "Число") Тогда
    ////                    // простые типы данных записываем без ссылок
    ////                    стрПроводка = стрПроводка + ","""+стрДебетКредит+"."+ИдентВидСубк+"("+ТипЗначенияСубконто+")"+ТекЗначениеСубконто+"""";
    ////                Иначе
    ////                    стрПроводка = стрПроводка + ","""+стрДебетКредит+"."+ИдентВидСубк+"(#)"+ТекСсылкаСубконто+"""";
    ////                КонецЕсли;
    ////            КонецЕсли;
    ////        КонецЦикла; // по субконто
    ////        стрДебетКредит = "Кредит"; // для второй итерации
    ////        Если спрСчета.НайтиПоКоду(Сокрлп(СчетКредита)) = 1 Тогда
    ////            ТекСчет = спрСчета.ТекущийЭлемент();
    ////        КонецЕсли;
    ////    КонецЦикла;
    	
    ////    Если ТипПроводки = "" Тогда
    ////        Если ИспользуетсяРазделительУчета = 1 Тогда
    ////            // добавим ссылку на фирму
    ////            стрПроводка = стрПроводка +","""+Сокрлп(ИдентифРазделителяУчета)+"(#)"+ПрефФирма+Сокрлп(Фирма.Код)+"""";
    ////        КонецЕсли;
    ////        стрПроводка = стрПроводка + ",""НомерЖурнала()"+Сокрлп(НомерЖурнала)+"""";
    ////    КонецЕсли;
    ////    ткстЭкспорт.ДобавитьСтроку(стрПроводка);
        }


        private OLE ПолучитьПроводку(OLE ХозОперация, int НомПроводки)
        {
            // получить проводку по номеру
            OLE СпрПроводок = V7Z.CreateObject("Справочник.Проводки");
            СпрПроводок.Method("ИспользоватьВладельца", ХозОперация);
            СпрПроводок.Method("ВыбратьЭлементы");
            int Инд = 1;

            while (СпрПроводок.Method("ПолучитьЭлемент").ToBool())
            {

                if (Инд == НомПроводки)
                {
                    //нашли нужную проводку   
                    return СпрПроводок.Method("ТекущийЭлемент");
                }
                Инд++;
            }
            return null;
        }
  
    private bool ЭкспортПроводокПоОтчислениямФЗП(string ТипПроводки)
    {
    //ПоказатьСостояние("Формируются проводки (отчисления с ФЗП).");
	
    //// обработаем файл с налогами
    //// первый проход по сотрудникам
    //дбфНалоги.ТекущийИндекс("IDXSOTR");
	
    //Если дбфНалоги.Первая() = 0 Тогда
    //    глТрассировка("Не могу перейти на первую запись во временном DBF-файле налогов (1)!",2);
    //    // файл пуст
    //    Возврат 1;
    //КонецЕсли;
	
    //тбНалоги.Заполнить(0,,,"Сумма,Коэф");
	
    //// сохраняем значения ключевого поля
    //ТабНомер = дбфНалоги.TAB_N;
    //// сохраним значение ключа
    //КлючПредыдущейЗаписи = ТабНомер;
    //// вспомогательные переменные
    //ПервыйПроход = 1;
    //// на первом проходе по сотруднику суммируем базу, 
    //// после первого прохода рассчитываем коэффициент,
    //// на втором проходе умножаем суммы в файле на коэффициент
    //ВКонце = 0;
    //Пока 1 = 1 Цикл
    //    // определим строковое значение ключа текущей запсии
    //    КлючТекущейЗаписи = дбфНалоги.TAB_N;
    //    Если (КлючТекущейЗаписи = КлючПредыдущейЗаписи) И (ВКонце = 0) Тогда
    //        Если ПервыйПроход = 1 Тогда
    //            // пока ключи совпадают (т.е. сотрудник один и тот же), будем просто суммировать базу налога
    //            // для хозоперации суммируем сумму по хозоперации, а не по каждой проводке
    //            // таким образом, если в хозоперации 2 проводки (собственно начисление + валовые расходы)
    //            // то в базу для налога данная сумма попадет только один раз
    //            Для Инд = 1 По НалоговФЗП Цикл
    //                тбНалоги.ПолучитьСтрокуПоНомеру(Инд);
    //                тбНалоги.Сумма = тбНалоги.Сумма + дбфНалоги.ПолучитьЗначениеПоля(тбНалоги.ИдСуммы+"OP");
    //            КонецЦикла;
    //        Иначе
    //            // второй проход - умножим суммы из ДБФ на коэффициенты
    //            Для Инд = 1 По НалоговФЗП Цикл
    //                тбНалоги.ПолучитьСтрокуПоНомеру(Инд);
    //                дбфНалоги.УстановитьЗначениеПоля(тбНалоги.ИдСуммы+"_SUM", дбфНалоги.ПолучитьЗначениеПоля(тбНалоги.ИдСуммы) * тбНалоги.Коэф); // база * коэф
    //            КонецЦикла;
    //        КонецЕсли;
    //    Иначе
    //        // начались записи с другим ключом или конец файла
    //        // т.е. все записи по текущему сотруднику просмотрены
    //        Если ПервыйПроход = 1 Тогда
    //            // определим коэффициенты
    //            НомСтр = 0; 
    //            Если тбБазы.НайтиЗначение(КлючПредыдущейЗаписи,НомСтр,"ТабНомер") = 1 Тогда
    //                тбБазы.ПолучитьСтрокуПоНомеру(НомСтр);
    //                Для Инд = 1 По НалоговФЗП Цикл
    //                    тбНалоги.ПолучитьСтрокуПоНомеру(Инд);
    //                    База = 0;
    //                    Если тбНалоги.ВидДохода.Код = "ФЗППенс" Тогда
    //                        База = тбБазы.БазаПенОрг;
    //                    ИначеЕсли тбНалоги.ВидДохода.Код = "ФЗППенсИнв" Тогда
    //                        База = тбБазы.БазаПенИнв;
    //                    ИначеЕсли тбНалоги.ВидДохода.Код = "ФЗППенсЛет" Тогда
    //                        База = тбБазы.БазаПенЛет;
    //                    ИначеЕсли тбНалоги.ВидДохода.Код = "ФЗПСоцСтрах" Тогда
    //                        База = тбБазы.БазаСоцОрг;
    //                    ИначеЕсли тбНалоги.ВидДохода.Код = "ФЗПСоцСтрахИнв" Тогда
    //                        База = тбБазы.БазаСоцИнв;
    //                    ИначеЕсли тбНалоги.ВидДохода.Код = "ФЗПБезраб" Тогда
    //                        База = тбБазы.БазаБезОрг;
    //                    ИначеЕсли тбНалоги.ВидДохода.Код = "ФЗПСоцСтрахНесч" Тогда
    //                        База = тбБазы.БазаНесчОрг;
    //                    КонецЕсли;
    //                    // поскольку есть ограничения на базы (на текущий момент 1000 грн), то недостаточно 
    //                    // умножить каждое начисление, которое входит в базу, на ставку налога
    //                    // необходимо рассчитать коэффициент, как отношение базы с учетом ограничения к полной базе
    //                    тбНалоги.Коэф = ?(тбНалоги.Сумма=0,0,База*тбНалоги.Ставка/тбНалоги.Сумма);
    //                КонецЦикла;
    //            Иначе
    //                // обнулим коэффициенты
    //                Для Инд = 1 По НалоговФЗП Цикл
    //                    тбНалоги.ПолучитьСтрокуПоНомеру(Инд);
    //                    тбНалоги.Коэф = 0;
    //                КонецЦикла;
    //                глТрассировка("Для сотрудника с табельным номером " + СокрЛП(КлючПредыдущейЗаписи) + " не определены базы налогов!",1);
    //            КонецЕсли;
    //            ПервыйПроход = 0;
    //            // установим указатель на первую запись по сотру
    //            дбфНалоги.Найти(КлючПредыдущейЗаписи,0);
    //            ВКонце = 0;
    //            Продолжить;
    //        Иначе
    //            // второй проход, начались записи по новому сотруднику
    //            // суммы устанавливаем из текущей записи
    //            Для Инд = 1 По НалоговФЗП Цикл
    //                тбНалоги.ПолучитьСтрокуПоНомеру(Инд);
    //                тбНалоги.Сумма = дбфНалоги.ПолучитьЗначениеПоля(тбНалоги.ИдСуммы+"OP");
    //            КонецЦикла;
    //            ПервыйПроход = 1;
    //            // сохраняем значения ключевого поля
    //            ТабНомер = дбфНалоги.TAB_N;
    //            // сохраним значение ключа
    //            КлючПредыдущейЗаписи = КлючТекущейЗаписи;
    //        КонецЕсли;
    //    КонецЕсли;
		
    //    Если дбфНалоги.Следующая() = 0 Тогда
    //        Если ПервыйПроход = 1 Тогда
    //            // вернемся на предыдущую запись
    //            дбфНалоги.Предыдущая();
    //            // сделаем еще один проход
    //            ВКонце = 1;
    //            Продолжить
    //        Иначе
    //            Прервать;
    //        КонецЕсли;
    //    КонецЕсли;
    //КонецЦикла;
	
    //// второй проход группируем по проводкам
    //дбфНалоги.ТекущийИндекс("IDXPROV");
	
    //Если дбфНалоги.Первая() = 0 Тогда
    //    глТрассировка("Не могу перейти на первую запись во временном DBF-файле налогов (2)!",2);
    //    Возврат 0;
    //КонецЕсли;
	                                                           
    //// будем просто накапливать суммы, коэффициенты больше не нужны
    //Для Инд = 1 По НалоговФЗП Цикл
    //    тбНалоги.ПолучитьСтрокуПоНомеру(Инд);
    //    тбНалоги.Сумма = 0;
    //КонецЦикла;
    //// сохраняем значения всех ключевых полей
    //СчетДебета = дбфНалоги.ACC_D;
    //СубконтоДебета1 = дбфНалоги.SUBC_D1;
    //СубконтоДебета2 = дбфНалоги.SUBC_D2;
    //СубконтоДебета3 = дбфНалоги.SUBC_D3;
    //СубконтоДебета4 = дбфНалоги.SUBC_D4;
    //// сохраним значение ключа в виде строки
    //КлючПредыдущейЗаписи = 	СчетДебета + СубконтоДебета1 + СубконтоДебета2 + СубконтоДебета3 + СубконтоДебета4;
    //// вспомогательные переменные 
    //ВКонце = 0;
    //Пока 1 = 1 Цикл
    //    // определим строковое значение ключа текущей записи
    //    КлючТекущейЗаписи = дбфНалоги.ACC_D + дбфНалоги.SUBC_D1 + дбфНалоги.SUBC_D2 + дбфНалоги.SUBC_D3 + дбфНалоги.SUBC_D4;
    //    Если (КлючТекущейЗаписи = КлючПредыдущейЗаписи) И (ВКонце = 0) Тогда
    //        // пока ключи совпадают, будем просто суммировать
    //        Для Инд = 1 По НалоговФЗП Цикл
    //            тбНалоги.ПолучитьСтрокуПоНомеру(Инд);
    //            тбНалоги.Сумма = тбНалоги.Сумма + дбфНалоги.ПолучитьЗначениеПоля(тбНалоги.ИдСуммы+"_SUM");
    //        КонецЦикла;
    //    Иначе
    //        // начались записи с другим ключом или конец файла
    //        Для Инд = 1 По НалоговФЗП Цикл
    //            тбНалоги.ПолучитьСтрокуПоНомеру(Инд);
    //            // список проводок хоз. операции сохранен в таблице
    //            Если ПустоеЗначение(тбНалоги.Проводки) = 1 Тогда
    //                // почему-то нет проводок по налогу
    //                Продолжить;
    //            КонецЕсли;
    //            спПроводки = тбНалоги.Проводки;
    //            КвоПроводок = спПроводки.РазмерСписка();
				
    //            // принцип заполнения дебета и кредита для проводок такой:
    //            // 		если в хозоперации налога есть проводка с точно таким же счетом дебета (как в дбф), 
    //            // 		то формируем ее, авто субконто при этом заполняем из дбф, остальные - из проводки
    //            //		при этом 81 счет в дбф (по начислению) "приравнивается" к 82 в справочнике проводок (по налогу)
    //            // 		
    //            //		если же проводки с таким счетом дебета в справочнике нет, то 
    //            //		формируем ту проводку, у которой в справочнике счет дебета не указан
    //            //		при этом аналогично авто субконто заполняются из дбф, а явно указанные - из справочника
				
    //            ЕстьПроводка = 0;
    //            Для ИндПров = 1 По КвоПроводок Цикл
    //                ТекПроводка = спПроводки.ПолучитьЗначение(ИндПров);
    //                ТекКодСчетаДебета = СокрЛП(ТекПроводка.СчетДебета.Код);
					
    //                Если (ТекКодСчетаДебета = СокрЛП(СчетДебета)) 
    //                или ((Лев(ТекКодСчетаДебета, 2) = "82") и (Лев(СокрЛП(СчетДебета),2) = "81"))
    //                или ((Лев(ТекКодСчетаДебета, 2) = "82") и (Лев(СокрЛП(СчетДебета),2) = "47"))
    //                Тогда
    //                    // если счета дебета совпадают, то информацию берем из справочника
    //                    ЕстьПроводка = 1;
    //                    Прервать
    //                КонецЕсли;
    //            КонецЦикла;
				
    //            Если ЕстьПроводка = 0 Тогда
    //                // нет точного совпадения счета дебета, попытаемся найти проводку с пустым счетом дебета
    //                Для ИндПров = 1 По КвоПроводок Цикл
    //                    ТекПроводка = спПроводки.ПолучитьЗначение(ИндПров);
						
    //                    Если ПустоеЗначение(ТекПроводка.СчетДебета) = 1 Тогда
    //                        ЕстьПроводка = 1;
    //                        Прервать
    //                    КонецЕсли;
    //                КонецЦикла;
    //            КонецЕсли;
				
    //            Если ЕстьПроводка = 0 Тогда
    //                глТрассировка("Для начислений в дебет счета "+СчетДебета+" не удалось найти соответствующую проводку в хоз. операции налога "+тбНалоги.ВидДохода, 1);
    //            ИначеЕсли ФорматФайла = "1СБух60" Тогда
    //                // есть нужная проводка, формируем ее
    //                СубкД = ?(ТекПроводка.АвтоСубконтоДебет1 = 1, СубконтоДебета1, ДобавитьСубконтоВСписок(ТекПроводка.СубконтоДебет1));
    //                // авто субконто по кредиту все равно берутся из дебета по дбф - там только дебет и есть
    //                СубкК = ?(ТекПроводка.АвтоСубконтоКредит1 = 1, СубконтоДебета1, ДобавитьСубконтоВСписок(ТекПроводка.СубконтоКредит1));
    //                Проводка60(?(ПустоеЗначение(ТекПроводка.СчетДебета)=1, СчетДебета, ТекПроводка.СчетДебета) 
    //                    ,ТекПроводка.СчетКредита,СубкД, СубкК, Окр(тбНалоги.Сумма,2,1));
    //            Иначе
    //                // есть нужная проводка, формируем ее
    //                спСубконто = СоздатьОбъект("СписокЗначений");
    //                // дебет
    //                спСубконто.Установить("СубконтоДебет1",?(ТекПроводка.АвтоСубконтоДебет1 = 1, СубконтоДебета1,
    //                        ДобавитьСубконтоВСписок(ТекПроводка.СубконтоДебет1)));
    //                спСубконто.Установить("СубконтоДебет2",?(ТекПроводка.АвтоСубконтоДебет2 = 1, СубконтоДебета2,
    //                        ДобавитьСубконтоВСписок(ТекПроводка.СубконтоДебет2)));
    //                спСубконто.Установить("СубконтоДебет3",?(ТекПроводка.АвтоСубконтоДебет3 = 1, СубконтоДебета3,
    //                        ДобавитьСубконтоВСписок(ТекПроводка.СубконтоДебет3)));
    //                спСубконто.Установить("СубконтоДебет4",?(ТекПроводка.АвтоСубконтоДебет4 = 1, СубконтоДебета4,
    //                        ДобавитьСубконтоВСписок(ТекПроводка.СубконтоДебет4)));
    //                // кредит (авто субконто все равно берутся из дебета по дбф - там только дебет и есть)
    //                спСубконто.Установить("СубконтоКредит1",?(ТекПроводка.АвтоСубконтоКредит1 = 1, СубконтоДебета1,
    //                        ДобавитьСубконтоВСписок(ТекПроводка.СубконтоКредит1)));
    //                спСубконто.Установить("СубконтоКредит2",?(ТекПроводка.АвтоСубконтоКредит2 = 1, СубконтоДебета2,
    //                        ДобавитьСубконтоВСписок(ТекПроводка.СубконтоКредит2)));
    //                спСубконто.Установить("СубконтоКредит3",?(ТекПроводка.АвтоСубконтоКредит3 = 1, СубконтоДебета3,
    //                        ДобавитьСубконтоВСписок(ТекПроводка.СубконтоКредит3)));
    //                спСубконто.Установить("СубконтоКредит4",?(ТекПроводка.АвтоСубконтоКредит4 = 1, СубконтоДебета4,
    //                        ДобавитьСубконтоВСписок(ТекПроводка.СубконтоКредит4)));
    //                        Если ((Лев(ТекКодСчетаДебета, 2) = "82") и (Лев(СокрЛП(СчетДебета),2) = "47")) Тогда
    //                            Проводка77(?(ПустоеЗначение(ТекПроводка.СчетДебета)=1, СчетДебета, СчетДебета) 
    //                            ,ТекПроводка.СчетКредита,спСубконто,Окр(тбНалоги.Сумма,2,1),ТипПроводки); 
    //                        Иначе
    //                            Проводка77(?(ПустоеЗначение(ТекПроводка.СчетДебета)=1, СчетДебета, ТекПроводка.СчетДебета) 
    //                            ,ТекПроводка.СчетКредита,спСубконто,Окр(тбНалоги.Сумма,2,1),ТипПроводки);   
    //                        КонецЕсли;
    //                        спСубконто = 0;
    //                КонецЕсли;
    //        КонецЦикла;
    //        // сумму устанавливаем из текущей записи
    //        Для Инд = 1 По НалоговФЗП Цикл
    //            тбНалоги.ПолучитьСтрокуПоНомеру(Инд);
    //            тбНалоги.Сумма = дбфНалоги.ПолучитьЗначениеПоля(тбНалоги.ИдСуммы+"_SUM");
    //        КонецЦикла;
    //        // сохраняем значения всех ключевых полей
    //        СчетДебета = дбфНалоги.ACC_D;
    //        СубконтоДебета1 = дбфНалоги.SUBC_D1;
    //        СубконтоДебета2 = дбфНалоги.SUBC_D2;
    //        СубконтоДебета3 = дбфНалоги.SUBC_D3;
    //        СубконтоДебета4 = дбфНалоги.SUBC_D4;
    //        // сохраним значение ключа в виде строки
    //        КлючПредыдущейЗаписи = КлючТекущейЗаписи;
    //    КонецЕсли;
		
    //    Если ВКонце = 1 Тогда
    //        // достигли конца файла и обработали последнее значение ключа 
    //        Прервать;
    //    ИначеЕсли дбфНалоги.Следующая() = 0 Тогда
    //        // достигли конца файла
    //        Если ВКонце = 0 Тогда
    //            // но не обработали последнюю выборку
    //            ВКонце = 1;
    //            дбфНалоги.Предыдущая();
    //            Продолжить;
    //        КонецЕсли;
    //        Прервать;
    //    КонецЕсли;
    //КонецЦикла;
	
	return true;
    }
    private bool ЭкспортПроводокПоОтчислениямФЗП()
    {
        return ЭкспортПроводокПоОтчислениямФЗП("");
    }

 